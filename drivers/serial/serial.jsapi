PROTOTYPE("Serial", serial, {
})

CONSTRUCTOR("Serial", serial, do_serial_constructor, {
    .params = {
       { .name = "UART", .description = "HW UART ID" },
       { .name = "options", .description = "optional options object of type "
           "{ baud_rate : int // Serial Baud Rate } "
       },
    },
    .description = "Serial Constructor",
    .return_value = "Created object",
    .example = "var s = new Serial(UART1);\n"
        "s.print('Hello World!);",
})

FUNCTION("enable", serial, do_serial_enable, {
    .params = { }, .description = "Enable a serial port",
    .return_value = "None",
    .example = "var s = new Serial(UART1);\n"
        "s.enable();",
})

FUNCTION("disable", serial, do_serial_disable, {
    .params = { },
    .description = "Disable a serial port",
    .return_value = "None",
    .example = "var s = new Serial(UART1);\n"
        "s.disable();",
})

FUNCTION("print", serial, do_serial_print, {
    .params = {
        { .name = "string" , .description = "String to be printed to serial port" }
    },
    .description = "Prints string",
    .return_value = "None",
    .example = "var s = new Serial(UART1);\n"
        "s.print('Hello World!');",
})

FUNCTION("write", serial, do_serial_write, {
    .params = {
        {
	    .name = "data" ,
	    .description = "Data (byte/array/string/typed array) to be sent" 
	},
    },
    .description = "Writes data to the serial port",
    .return_value = "None",
    .example = "var s = new Serial(UART1);\n"
        "s.write(255);\n"
	"s.write([1,2,3])",
})

FUNCTION("onData", serial, do_serial_on_data, {
    .params = {
        { .name = "cb", .description = "callback function accepting a data object" },
    },
    .description = "Calls 'cb' when data is available on serial port.\n"
        "If cb is undefined, removes the previously set cb",
    .return_value = "Event ID",
    .example = "var s = new Serial(UART1);\n"
        "s.onData(function(e) { s.print(e.data); });",
})
