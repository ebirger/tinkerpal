FUNCTION("eval", global_env, do_eval, {
    .params = { 
       { .name = "str", .description = "String to be evaluated" },
     },
    .description = "Evaluate the given String",
    .return_value = "Last valued statement return value",
    .example = "var two = eval('1+1');",
})

FUNCTION("toInteger", global_env, do_to_integer, {
    .params = { 
       { .name = "object", .description = "Object to be converted" },
     },
    .description = "Convert the given object to an integer value",
    .return_value = "Numeric value of converted object",
    .example = "var n = toInteger('5') + 1;",
})

FUNCTION("isNaN", global_env, do_is_nan, {
    .params = { 
       { .name = "number", .description = "Object to be tested for NaNity" },
     },
    .description = "Tests if the object is NaN",
    .return_value = "'true' if the object converted to Number is NaN, "
        "'false' otherwise",
    .example = "isNaN(1); // false\n"
        "isNaN('abc'); // true",
})

OBJECT("debug", debug, {
})

FUNCTION("assert", debug, do_assert, {
    .params = { 
       { .name = "object1", .description = "Object for comparison" },
       { .name = "object2", .description = "Object for comparison" },
     },
    .description = "Panic on mismatch between two objects",
    .return_value = "None",
    .example = "debug.assert(1, 1);",
})

FUNCTION("assert_cond", debug, do_assert_cond, {
    .params = { 
       { .name = "object", .description = "Object to test" },
     },
    .description = "Panic if object is false",
    .return_value = "None",
    .example = "debug.assert_cond(1 == 1);",
})

FUNCTION("assert_exception", debug, do_assert_exception, {
    .params = { 
       { .name = "cb", .description = "function to test" },
     },
    .description = "Panic if calling cb() does not raise an exception",
    .return_value = "None",
    .example = "debug.assert_exception(function() { throw 'error'; });",
})

FUNCTION("dump_env", debug, do_dump_env, {
    .params = { 
     },
    .description = "Dump global environment information to the console",
    .return_value = "None",
    .example = "debug.dump_env();",
})

FUNCTION("meminfo", global_env, do_meminfo, {
    .params = { },
    .description = "Prints platform dependent memory information",
    .return_value = "None",
    .example = "meminfo()",
})

FUNCTION("describe", global_env, do_describe, {
    .params = { 
       { .name = "object", .description = "Object to describe" },
     },
    .description = "Print object description to the console",
    .return_value = "None",
    .example = "describe(describe);",
})

FUNCTION("compile", global_env, do_compile, {
    .params = { 
       { .name = "function", .description = "function_to_be_compiled" },
     },
    .description = "Compiles a function for faster execution",
    .return_value = "The compiled function",
    .example = "var f = compile(function() { return 1 + 1; });",
})

FUNCTION("objGraph", global_env, do_objgraph, {
    .params = { },
    .description = "Create a DOT graph of allocated objects",
    .return_value = "None",
    .example = "objGraph()",
})
