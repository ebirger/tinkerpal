CLASS_PROTOTYPE("ArrayBuffer", array_buffer_prototype, object_prototype,
    ARRAY_BUFFER_CLASS, {
})

CLASS_PROTOTYPE("ArrayBufferView", array_buffer_view_prototype, object_prototype,
    ARRAY_BUFFER_VIEW_CLASS, {
})

CONSTRUCTOR("ArrayBuffer", array_buffer_prototype, do_array_buffer_constructor, {
    .params = {
       { .name = "Size", .description = "Number of bytes in Array Buffer" },
    },
    .description = "ArrayBuffer Constructor",
    .return_value = "Created ArrayBuffer",
    .example = "var a = new ArrayBuffer(5);\n"
})

#define GEN_ABV_CONSTURCTOR(type, ctype) \
CONSTRUCTOR(#type "Array", array_buffer_view_prototype, do_##ctype##array_constructor, { \
    .params = { \
       { .name = "Array/ArrayBuffer/Size", .description = "Array, ArrayBuffer or Number of " \
           "Elements in a newly created ArrayBuffer" }, \
    }, \
    .description = #type "Array Constructor", \
    .return_value = "Created ArrayBufferView", \
    .example = "var a = new " #type "Array(5);\n" \
})

GEN_ABV_CONSTURCTOR(Int8, int8)
GEN_ABV_CONSTURCTOR(Uint8, uint8)
GEN_ABV_CONSTURCTOR(Int16, int16)
GEN_ABV_CONSTURCTOR(Uint16, uint16)
GEN_ABV_CONSTURCTOR(Int32, int32)
GEN_ABV_CONSTURCTOR(Uint32, uint32)

FUNCTION("subarray", array_buffer_view_prototype, do_array_buffer_view_subarray, {
    .params = { 
        { 
            .name = "begin",
            .description = "Start offset (inclusive)"
        },
        { 
            .name = "end",
	    .description = "(Optional) End offset (exclusive)"
        },
    },
    .description = "Return a partial typed array based on the typed array"
        "If end is unspecified, the subarray contains all elements from begin "
	"to the end of the TypedArray. If either begin or end are negative, "
	"they are calculated from the end of the array",
    .return_value = "ArrayBufferView object pointing to [begin,end)",
    .example = "var a = new Int8Array(16);\n"
	"var b = a.subarray(1, 5);\n"
})
