CLASS_PROTOTYPE("Function", function_prototype, object_prototype, FUNCTION_CLASS, {
})

CONSTRUCTOR("Function", function_prototype, do_function_constructor, {
    .params = {
       { .name = "[arg1, [arg2, [.. ]]]", .description = "Formal Parameter Names" },
       { .name = "Body", .description = "Function Body" },
    },
    .description = "Function Constructor",
    .return_value = "Created Function",
    .example = "var f = new Function('a', 'b', 'return a+b');\n"
        "console.log('1+2=' + f(1, 2));",
})

FUNCTION("call", function_prototype, do_function_prototype_call, { 
    .params = { 
       { .name = "thisArg", .description = "The 'this' value on function invocation" },
       { .name = "arg1, arg2, ...", .description = "[optional] arguments to "
           "pass to function" },
     },
    .description = "Invoke function call",
    .return_value = "The function's return value",
    .example = "function fun() { this.prop = 'prop' }\n"
        "var obj = {};\n"
	"fun.call(obj);\n"
	"obj; // { prop : 'prop' }",
})

FUNCTION("apply", function_prototype, do_function_prototype_apply, { 
    .params = { 
       { .name = "thisArg", .description = "The 'this' value on function invocation" },
       { .name = "argArray", .description = "[optional] Array of arguments to "
           "pass to function" },
     },
    .description = "Invoke function call",
    .return_value = "The function's return value",
    .example = "function fun(a, b) { return a + b; }\n"
	"fun.apply(undefined, [1, 2]); // 3"
})

FUNCTION("bind", function_prototype, do_function_prototype_bind, { 
    .params = { 
       { .name = "thisArg", .description = "The 'this' value on function invokation" },
     },
    .description = "Returns a new Function object based on the current "
      "function object, but the 'this' value is bound to thisArg",
    .return_value = "A new Function object",
    .example = "function fun() { return this.prop; }\n"
        "var f = fun.bind({ prop : 1});\n"
	"f(); // 1",
})
